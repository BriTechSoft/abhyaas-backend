syntax = "proto3";

package abhyaas;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// The Medium service definition.
service MediumService {
  option (google.api.default_host) = "cloudresourcemanager.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/Mediums,"
      "https://www.googleapis.com/auth/Mediums.read-only";

  // List provides a strongly consistent view of all Mediums.
  // Filters and order by can be applied.
  rpc ListMediums(ListMediumsRequest) returns (ListMediumsResponse) {
    option (google.api.http) = {
      get: "/v1/mediums"
    };
    option (google.api.method_signature) = "filter";
  }

  // Retrieves a Medium identified by the supplied resource name.
  // Valid Medium resource names have the format `mediums/{medium_id}`
  // (for example, `mediums/1234`).
  rpc GetMedium(GetMediumRequest) returns (Medium) {
    option (google.api.http) = {
      get: "/v1/{name=mediums/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Creates a Medium. In order to succeed, the addition of this new Medium
  // must not violate the following constraint:
  //
  // + The Medium's display_name must be distinct from all other Mediums.
  //
  // If the operation fails due to a Medium constraint violation, the
  // error code FAILED_PRECONDITION is returned along with an error description.
  rpc CreateMedium(CreateMediumRequest) returns (Medium) {
    option (google.api.http) = {
      post: "/v1/mediums"
      body: "medium"
    };
  }

  // Updates a Medium, changing its display_name.
  rpc UpdateMedium(UpdateMediumRequest) returns (Medium) {
    option (google.api.http) = {
      patch: "/v1/{Medium.name=mediums/*}"
      body: "medium"
    };
    option (google.api.method_signature) = "Medium,update_mask";
  }

  // Requests deletion of a Medium.
  // error code FAILED_PRECONDITION is returned.
  rpc DeleteMedium(DeleteMediumRequest) returns (Medium) {
    option (google.api.http) = {
      delete: "/v1/{name=mediums/*}"
    };
    option (google.api.method_signature) = "name";
  }
}

// The request message containing the Medium's name,description
message Medium {
  // Medium lifecycle states.
  enum LifecycleState {
    // Unspecified state.
    LIFECYCLE_STATE_UNSPECIFIED = 0;

    // The normal and active state.
    ACTIVE = 1;

    // The Medium has been marked for deletion by the user.
    DELETE_REQUESTED = 2;
  }

  // Required. The resource name of the Medium.
  // Its format is `mediums/{medium_id}`
  // for example: "Mediums/1".
  // The name is ignored when creating a Medium.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The Medium’s display name.It is a REQUIRED
  // A Medium’s display name must be unique amongst its siblings,
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];

  //OPTIONAL .One or more paragraphs of text description of a Medium.
  string description = 3 [(google.api.field_behavior) = OPTIONAL];

  // Output only. Timestamp when the Medium was created. Assigned by the server.
  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp when the Medium was last modified.
  google.protobuf.Timestamp update_time =5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Timestamp when the Medium was last deleted.
  google.protobuf.Timestamp delete_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The lifecycle state of the Medium.
  LifecycleState lifecycle_state = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The CreateMedium request message.
message CreateMediumRequest {
  // Required. The Medium being created.
  // `name` must be empty. Only `display_name` is considered.
  Medium Medium = 1 [(google.api.field_behavior) = REQUIRED];
}


// The request message for updating a Medium's display name, description
message UpdateMediumRequest {
    // Required. The new definition of the Medium. It must include a
    // a `name` and `display_name` field. The other fields
    // will be ignored.
    Medium Medium = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. Provide fields that should be updated.
    // Supported fields: `display_name`.
    google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

  // The DeleteMedium request message.
message DeleteMediumRequest {
    // Required. The resource name of the Medium to be deleted.
    // Must be of the form `mediums/{medium_id}`.
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "Medium"
      }
    ];
}


  // The GetMedium request message.
message GetMediumRequest {
    // Required. The resource name of the Medium to retrieve.
    // Must be of the form `mediums/{medium_id}`.
    string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "Medium"
      }
    ];
}

// The ListMediums request message.
message ListMediumsRequest {
  // Optional. The maximum number of Mediums to return in the response.
  // If the page size is not set, the default of 10 is taken.
    int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A pagination token returned from a previous call to `ListMediums`
  // that indicates where this listing should continue from.
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // Filter criteria used to select the Mediums to return.
  // If no filter criteria is specified then all accessible Mediums will be
  // returned, regarding page_size.
  //
  // Query expressions can be used to restrict results based upon `display_name`,
  // where the operators `=`,`>`,`>=`,`<=`,`<`, `NOT`, `AND`,  `OR` , `LIKE` where
  // like can be used along with the suffix wildcard symbol `*`.
  //
  // String Fields, e.g., display_name in a query expression should use escaped quotes
  // for values that include whitespace to prevent unexpected behavior.
  //
  // Some example queries are:
  //
  // * Query "display_name LIKE 'Test*'" returns Medium resources whose display name
  // starts with "Test".
  // * Query "display_name = 'Test*'" returns the Medium with the display name 'Test*'.
  // * Query "display_name LIKE 'Test*' AND display_name = 'Test*'" shows the concatenation of criteria.
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Order the result set by field names.
  // The default sorting order is ascending.
  // To specify descending order for a field, a suffix " desc" must be appended to the field name.
  // For example: "foo desc,bar"
  // Redundant space characters in the syntax are insignificant.
  // For example: "foo,bar desc" and "  foo ,  bar  desc  " are equivalent.
  // Default order is by display_name ascending.
  string order_by = 4 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Displays deleted Mediums
  // Defaults to false.
  bool show_deleted = 5 [(google.api.field_behavior) = OPTIONAL];
}

// The ListMediums response message.
message ListMediumsResponse {
  // A possibly paginated list of Mediums.
  repeated Medium mediums = 1;

  // A pagination token returned from a previous call to `ListMediums`
  // that indicates from where listing should continue.
  string next_page_token = 2;

  // The total count of the Mediums regarding the reqest parameters.
  int32 total_size = 3;
}

